<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classtao_1_1_vector2" kind="class" language="C++" prot="public">
    <compoundname>tao::Vector2</compoundname>
    <includes refid="vector2_8h" local="no">vector2.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtao_1_1_vector2_1a84b259315e2000abdc2e6af5cd65d3c9" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double tao::Vector2::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <qualifiedname>tao::Vector2::x</qualifiedname>
        <briefdescription>
<para>The x value of the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="151" column="8" bodyfile="include/taolib/vector2.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtao_1_1_vector2_1af1bb61a0f28fe19d09efbe4f7b01da6e" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double tao::Vector2::y</definition>
        <argsstring></argsstring>
        <name>y</name>
        <qualifiedname>tao::Vector2::y</qualifiedname>
        <briefdescription>
<para>The y value of the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="156" column="8" bodyfile="include/taolib/vector2.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtao_1_1_vector2_1a76b488cae66f02da126eafefbc5090d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tao::Vector2::Vector2</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>Vector2</name>
        <qualifiedname>tao::Vector2::Vector2</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Initializes the <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> class with preloaded x and y values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x value of the vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>y value of the vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1a4b683aa12a50d17113c0ca5456e5d42a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tao::Vector2::Vector2</definition>
        <argsstring>(const Vector2 &amp;v)</argsstring>
        <name>Vector2</name>
        <qualifiedname>tao::Vector2::Vector2</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Initializes the <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> class with another vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The other vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1a18f0d9cf89f39649c63c49d47ffcc9f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tao::Vector2::Vector2</definition>
        <argsstring>()</argsstring>
        <name>Vector2</name>
        <qualifiedname>tao::Vector2::Vector2</qualifiedname>
        <briefdescription>
<para>Initializes the <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> class with the default x and y values of 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1a76c1626e03e6cdcfdc5a7580c0c05c5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tao::Vector2::get_x</definition>
        <argsstring>() const</argsstring>
        <name>get_x</name>
        <qualifiedname>tao::Vector2::get_x</qualifiedname>
        <briefdescription>
<para>Returns the x value of the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="37" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1a0e61744c51a72cb2b0604d26d23e132c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tao::Vector2::get_y</definition>
        <argsstring>() const</argsstring>
        <name>get_y</name>
        <qualifiedname>tao::Vector2::get_y</qualifiedname>
        <briefdescription>
<para>Returns the y value of the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="42" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1ad4cf4b8c74741670cf9f442b8710ddc5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tao::Vector2::get_magnitude</definition>
        <argsstring>() const</argsstring>
        <name>get_magnitude</name>
        <qualifiedname>tao::Vector2::get_magnitude</qualifiedname>
        <briefdescription>
<para>Returns the magnitude of the vector (the vector&apos;s length, or distance from the origin) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="47" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1ab8566c5cf96c055a97c60acb5eb87b1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tao::Vector2::get_angle</definition>
        <argsstring>() const</argsstring>
        <name>get_angle</name>
        <qualifiedname>tao::Vector2::get_angle</qualifiedname>
        <briefdescription>
<para>Returns the angle of the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="52" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1aad656f9e325178df919ea1db6b1228c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 tao::Vector2::normalized</definition>
        <argsstring>() const</argsstring>
        <name>normalized</name>
        <qualifiedname>tao::Vector2::normalized</qualifiedname>
        <briefdescription>
<para>Normalize the vector (change the length of the vector to 1 while retaining the direction) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Normalized version of the vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="58" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1af5a50aba85663b8e72c7131b0ee93f03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 tao::Vector2::rotated</definition>
        <argsstring>(double angle) const</argsstring>
        <name>rotated</name>
        <qualifiedname>tao::Vector2::rotated</qualifiedname>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Rotate the vector by a given angle in radians. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle by which the vector should be rotated</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Normalized version of the vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="67" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1a9ff2da09ab7e1e4bb184eacee38b2646" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tao::Vector2::dot</definition>
        <argsstring>(const Vector2 &amp;other) const</argsstring>
        <name>dot</name>
        <qualifiedname>tao::Vector2::dot</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Calculate the dot product of two vetors. </para>
        </briefdescription>
        <detaileddescription>
<para>The dot product is the product of the vector in the same length.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other vector to perform the dot operation with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector result of the dot operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="78" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1a458233bbf27d2bcba94ce96aaedb9343" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tao::Vector2::cross</definition>
        <argsstring>(const Vector2 &amp;other) const</argsstring>
        <name>cross</name>
        <qualifiedname>tao::Vector2::cross</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Calculate the cross product of two vetors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other vector to perform the cross operation with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector result of the cross operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="87" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1a5360e1671e705b132c60e1c0c248d92a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tao::Vector2::distance</definition>
        <argsstring>(const Vector2 &amp;other) const</argsstring>
        <name>distance</name>
        <qualifiedname>tao::Vector2::distance</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Calculates the distance between two vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other vector to perform the distance calculation with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector result of the dot operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="96" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1a36fead8cbbcf0de28c6accf2da32a7eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tao::Vector2::project</definition>
        <argsstring>(const Vector2 &amp;other) const</argsstring>
        <name>project</name>
        <qualifiedname>tao::Vector2::project</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="98" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1ab361fde9f3ed1285c85f5d059374b980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
        <definition>Vector2 &amp; tao::Vector2::operator+=</definition>
        <argsstring>(const Vector2 &amp;other)</argsstring>
        <name>operator+=</name>
        <qualifiedname>tao::Vector2::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="109" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1a1720ce63dde12e8c4a0236e7553c0653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
        <definition>Vector2 &amp; tao::Vector2::operator+=</definition>
        <argsstring>(const double scalar)</argsstring>
        <name>operator+=</name>
        <qualifiedname>tao::Vector2::operator+=</qualifiedname>
        <param>
          <type>const double</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="110" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1aa29f34e78ef253ce518586307a82350b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
        <definition>Vector2 &amp; tao::Vector2::operator-=</definition>
        <argsstring>(const Vector2 &amp;other)</argsstring>
        <name>operator-=</name>
        <qualifiedname>tao::Vector2::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="119" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1ac18bd615edb410fa1b72c24f4cf1a3a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
        <definition>Vector2 &amp; tao::Vector2::operator-=</definition>
        <argsstring>(const double scalar)</argsstring>
        <name>operator-=</name>
        <qualifiedname>tao::Vector2::operator-=</qualifiedname>
        <param>
          <type>const double</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="120" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1af5d3dc56ee6d63b387caed93f91cd766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
        <definition>Vector2 &amp; tao::Vector2::operator*=</definition>
        <argsstring>(const Vector2 &amp;other)</argsstring>
        <name>operator*=</name>
        <qualifiedname>tao::Vector2::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="129" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1a32bf61f3816b287660adcadf0de99047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
        <definition>Vector2 &amp; tao::Vector2::operator*=</definition>
        <argsstring>(const double scalar)</argsstring>
        <name>operator*=</name>
        <qualifiedname>tao::Vector2::operator*=</qualifiedname>
        <param>
          <type>const double</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="130" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1a87da7fc471bab0f04710ff69b647fcee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
        <definition>Vector2 &amp; tao::Vector2::operator/=</definition>
        <argsstring>(const Vector2 &amp;other)</argsstring>
        <name>operator/=</name>
        <qualifiedname>tao::Vector2::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="139" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1a5b5b3bd9f3d02ca2074c03323f4b6cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
        <definition>Vector2 &amp; tao::Vector2::operator/=</definition>
        <argsstring>(const double scalar)</argsstring>
        <name>operator/=</name>
        <qualifiedname>tao::Vector2::operator/=</qualifiedname>
        <param>
          <type>const double</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="140" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtao_1_1_vector2_1a6edb1310a676dcfda6f574e5822d3c4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator+</definition>
        <argsstring>(const Vector2 &amp;first, const Vector2 &amp;second)</argsstring>
        <name>operator+</name>
        <qualifiedname>tao::Vector2::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>Scalar and vector addition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="105" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1a80bc1eebcc4f873563795c3d1c642f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator+</definition>
        <argsstring>(const Vector2 &amp;first, double scalar)</argsstring>
        <name>operator+</name>
        <qualifiedname>tao::Vector2::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="106" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1a562ab9c68ef114811112c9005a83e78c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator+</definition>
        <argsstring>(double scalar, const Vector2 &amp;second)</argsstring>
        <name>operator+</name>
        <qualifiedname>tao::Vector2::operator+</qualifiedname>
        <param>
          <type>double</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="107" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1a3a71148e45019e258f7f522acc91442e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator-</definition>
        <argsstring>(const Vector2 &amp;first, const Vector2 &amp;second)</argsstring>
        <name>operator-</name>
        <qualifiedname>tao::Vector2::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>Scalar and vector subtraction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="115" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1acbb46280f945972ce526b20f19eb25a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator-</definition>
        <argsstring>(const Vector2 &amp;first, double scalar)</argsstring>
        <name>operator-</name>
        <qualifiedname>tao::Vector2::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="116" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1a15e352f172094fd3ace2bb09d8775e91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator-</definition>
        <argsstring>(double scalar, const Vector2 &amp;second)</argsstring>
        <name>operator-</name>
        <qualifiedname>tao::Vector2::operator-</qualifiedname>
        <param>
          <type>double</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="117" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1a7582b11a2427f500f88c486269e467c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator*</definition>
        <argsstring>(const Vector2 &amp;first, const Vector2 &amp;second)</argsstring>
        <name>operator*</name>
        <qualifiedname>tao::Vector2::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>Scalar and vector multiplication. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="125" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1a1390cc58a6c7ec5e2487c38bae1bb4e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator*</definition>
        <argsstring>(const Vector2 &amp;first, double scalar)</argsstring>
        <name>operator*</name>
        <qualifiedname>tao::Vector2::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="126" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1a97e3dd5c4e17c193992b181356a101c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator*</definition>
        <argsstring>(const double scalar, const Vector2 &amp;second)</argsstring>
        <name>operator*</name>
        <qualifiedname>tao::Vector2::operator*</qualifiedname>
        <param>
          <type>const double</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="127" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1a9d95331313366e0476cac3e17c55664e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator/</definition>
        <argsstring>(const Vector2 &amp;first, const Vector2 &amp;second)</argsstring>
        <name>operator/</name>
        <qualifiedname>tao::Vector2::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>Scalar and vector division. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="135" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1a59cacb96af6ba4d7386e9cb98048ae7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator/</definition>
        <argsstring>(const Vector2 &amp;first, double scalar)</argsstring>
        <name>operator/</name>
        <qualifiedname>tao::Vector2::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="136" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1a9963c1e89c4e1678ac603eea6d638982" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator/</definition>
        <argsstring>(double scalar, const Vector2 &amp;second)</argsstring>
        <name>operator/</name>
        <qualifiedname>tao::Vector2::operator/</qualifiedname>
        <param>
          <type>double</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="137" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1a8f5e1db52aa8a55dd104f3e85e69eb2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Vector2 &amp;first, const Vector2 &amp;second)</argsstring>
        <name>operator==</name>
        <qualifiedname>tao::Vector2::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>Vector comparison. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="145" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class object to represent a vector within a 2 dimensional space. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/taolib/vector2.h" line="14" column="1" bodyfile="include/taolib/vector2.h" bodystart="14" bodyend="157"/>
    <listofallmembers>
      <member refid="classtao_1_1_vector2_1a458233bbf27d2bcba94ce96aaedb9343" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>cross</name></member>
      <member refid="classtao_1_1_vector2_1a5360e1671e705b132c60e1c0c248d92a" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>distance</name></member>
      <member refid="classtao_1_1_vector2_1a9ff2da09ab7e1e4bb184eacee38b2646" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>dot</name></member>
      <member refid="classtao_1_1_vector2_1ab8566c5cf96c055a97c60acb5eb87b1f" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>get_angle</name></member>
      <member refid="classtao_1_1_vector2_1ad4cf4b8c74741670cf9f442b8710ddc5" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>get_magnitude</name></member>
      <member refid="classtao_1_1_vector2_1a76c1626e03e6cdcfdc5a7580c0c05c5c" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>get_x</name></member>
      <member refid="classtao_1_1_vector2_1a0e61744c51a72cb2b0604d26d23e132c" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>get_y</name></member>
      <member refid="classtao_1_1_vector2_1aad656f9e325178df919ea1db6b1228c1" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>normalized</name></member>
      <member refid="classtao_1_1_vector2_1a7582b11a2427f500f88c486269e467c6" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator*</name></member>
      <member refid="classtao_1_1_vector2_1a1390cc58a6c7ec5e2487c38bae1bb4e5" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator*</name></member>
      <member refid="classtao_1_1_vector2_1a97e3dd5c4e17c193992b181356a101c3" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator*</name></member>
      <member refid="classtao_1_1_vector2_1af5d3dc56ee6d63b387caed93f91cd766" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator*=</name></member>
      <member refid="classtao_1_1_vector2_1a32bf61f3816b287660adcadf0de99047" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator*=</name></member>
      <member refid="classtao_1_1_vector2_1a6edb1310a676dcfda6f574e5822d3c4e" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator+</name></member>
      <member refid="classtao_1_1_vector2_1a80bc1eebcc4f873563795c3d1c642f2c" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator+</name></member>
      <member refid="classtao_1_1_vector2_1a562ab9c68ef114811112c9005a83e78c" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator+</name></member>
      <member refid="classtao_1_1_vector2_1ab361fde9f3ed1285c85f5d059374b980" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator+=</name></member>
      <member refid="classtao_1_1_vector2_1a1720ce63dde12e8c4a0236e7553c0653" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator+=</name></member>
      <member refid="classtao_1_1_vector2_1a3a71148e45019e258f7f522acc91442e" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator-</name></member>
      <member refid="classtao_1_1_vector2_1acbb46280f945972ce526b20f19eb25a6" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator-</name></member>
      <member refid="classtao_1_1_vector2_1a15e352f172094fd3ace2bb09d8775e91" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator-</name></member>
      <member refid="classtao_1_1_vector2_1aa29f34e78ef253ce518586307a82350b" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator-=</name></member>
      <member refid="classtao_1_1_vector2_1ac18bd615edb410fa1b72c24f4cf1a3a9" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator-=</name></member>
      <member refid="classtao_1_1_vector2_1a9d95331313366e0476cac3e17c55664e" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator/</name></member>
      <member refid="classtao_1_1_vector2_1a59cacb96af6ba4d7386e9cb98048ae7d" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator/</name></member>
      <member refid="classtao_1_1_vector2_1a9963c1e89c4e1678ac603eea6d638982" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator/</name></member>
      <member refid="classtao_1_1_vector2_1a87da7fc471bab0f04710ff69b647fcee" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator/=</name></member>
      <member refid="classtao_1_1_vector2_1a5b5b3bd9f3d02ca2074c03323f4b6cd4" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator/=</name></member>
      <member refid="classtao_1_1_vector2_1a8f5e1db52aa8a55dd104f3e85e69eb2b" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator==</name></member>
      <member refid="classtao_1_1_vector2_1a36fead8cbbcf0de28c6accf2da32a7eb" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>project</name></member>
      <member refid="classtao_1_1_vector2_1af5a50aba85663b8e72c7131b0ee93f03" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>rotated</name></member>
      <member refid="classtao_1_1_vector2_1a76b488cae66f02da126eafefbc5090d9" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>Vector2</name></member>
      <member refid="classtao_1_1_vector2_1a4b683aa12a50d17113c0ca5456e5d42a" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>Vector2</name></member>
      <member refid="classtao_1_1_vector2_1a18f0d9cf89f39649c63c49d47ffcc9f7" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>Vector2</name></member>
      <member refid="classtao_1_1_vector2_1a84b259315e2000abdc2e6af5cd65d3c9" prot="private" virt="non-virtual"><scope>tao::Vector2</scope><name>x</name></member>
      <member refid="classtao_1_1_vector2_1af1bb61a0f28fe19d09efbe4f7b01da6e" prot="private" virt="non-virtual"><scope>tao::Vector2</scope><name>y</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
