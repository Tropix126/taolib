<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classtao_1_1_vector2" kind="class" language="C++" prot="public">
    <compoundname>tao::Vector2</compoundname>
    <includes refid="vector2_8h" local="no">vector2.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtao_1_1_vector2_1a84b259315e2000abdc2e6af5cd65d3c9" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double tao::Vector2::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <qualifiedname>tao::Vector2::x</qualifiedname>
        <briefdescription>
<para>The x value of the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="124" column="8" bodyfile="include/taolib/vector2.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtao_1_1_vector2_1af1bb61a0f28fe19d09efbe4f7b01da6e" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double tao::Vector2::y</definition>
        <argsstring></argsstring>
        <name>y</name>
        <qualifiedname>tao::Vector2::y</qualifiedname>
        <briefdescription>
<para>The y value of the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="129" column="8" bodyfile="include/taolib/vector2.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtao_1_1_vector2_1a76b488cae66f02da126eafefbc5090d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tao::Vector2::Vector2</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>Vector2</name>
        <qualifiedname>tao::Vector2::Vector2</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Initializes the <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> class with preloaded x and y values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x value of the vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>y value of the vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="14" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1a4b683aa12a50d17113c0ca5456e5d42a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tao::Vector2::Vector2</definition>
        <argsstring>(const Vector2 &amp;v)</argsstring>
        <name>Vector2</name>
        <qualifiedname>tao::Vector2::Vector2</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Initializes the <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> class with another vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The other vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1a18f0d9cf89f39649c63c49d47ffcc9f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tao::Vector2::Vector2</definition>
        <argsstring>()</argsstring>
        <name>Vector2</name>
        <qualifiedname>tao::Vector2::Vector2</qualifiedname>
        <briefdescription>
<para>Initializes the <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> class with the default x and y values of 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1aaa918b115227d1e8aa9b22eead200e3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tao::Vector2::get_x</definition>
        <argsstring>()</argsstring>
        <name>get_x</name>
        <qualifiedname>tao::Vector2::get_x</qualifiedname>
        <briefdescription>
<para>Returns the x value of the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="30" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1abd00ce60254a20edef09154364a6cef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tao::Vector2::get_y</definition>
        <argsstring>()</argsstring>
        <name>get_y</name>
        <qualifiedname>tao::Vector2::get_y</qualifiedname>
        <briefdescription>
<para>Returns the y value of the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="35" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1afd403d34438c90ce6b9fcb898166c13c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tao::Vector2::get_magnitude</definition>
        <argsstring>()</argsstring>
        <name>get_magnitude</name>
        <qualifiedname>tao::Vector2::get_magnitude</qualifiedname>
        <briefdescription>
<para>Returns the magnitude of the vector (the vector&apos;s length, or distance from the origin) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="40" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1a3e65ba8e9fa432ffb07a22a22801cc13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double tao::Vector2::get_angle</definition>
        <argsstring>()</argsstring>
        <name>get_angle</name>
        <qualifiedname>tao::Vector2::get_angle</qualifiedname>
        <briefdescription>
<para>Returns the angle of the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="45" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1a911e6a2b0a9087fdd9be7c17ff8c04dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 tao::Vector2::normalized</definition>
        <argsstring>()</argsstring>
        <name>normalized</name>
        <qualifiedname>tao::Vector2::normalized</qualifiedname>
        <briefdescription>
<para>Normalize the vector (change the length of the vector to 1 while retaining the direction) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Normalized version of the vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="51" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1ae0f8951c3e148e326f728c80038e98b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 tao::Vector2::rotated</definition>
        <argsstring>(double angle)</argsstring>
        <name>rotated</name>
        <qualifiedname>tao::Vector2::rotated</qualifiedname>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Rotate the vector by a given angle in radians. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle by which the vector should be rotated</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Normalized version of the vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="60" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtao_1_1_vector2_1a45a264ebf3844c3755760474357257e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double tao::Vector2::dot</definition>
        <argsstring>(const Vector2 &amp;left, const Vector2 &amp;right)</argsstring>
        <name>dot</name>
        <qualifiedname>tao::Vector2::dot</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Calculate the dot product of two vetors. </para>
        </briefdescription>
        <detaileddescription>
<para>The dot product is the product of the vector in the same length.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>Left hand side of the dot operator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>Right hand side of the dot operator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector result of the dot operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="72" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1a7bcb9f2c7420c0a419789e928e2b93c4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double tao::Vector2::cross</definition>
        <argsstring>(const Vector2 &amp;v1, const Vector2 &amp;v2)</argsstring>
        <name>cross</name>
        <qualifiedname>tao::Vector2::cross</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Calculate the cross product of two vetors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second vector.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector result of the cross operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="82" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classtao_1_1_vector2_1a84749d146d1715a6e4238d300c4a75fc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double tao::Vector2::distance</definition>
        <argsstring>(const Vector2 &amp;v1, const Vector2 &amp;v2)</argsstring>
        <name>distance</name>
        <qualifiedname>tao::Vector2::distance</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Calculates the distance between two vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second vector.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector result of the dot operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="92" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtao_1_1_vector2_1a63e74f57546a0537d6fc8eed7ea1ddc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator+</definition>
        <argsstring>(const Vector2 &amp;v1, const Vector2 &amp;v2)</argsstring>
        <name>operator+</name>
        <qualifiedname>tao::Vector2::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Scalar and vector addition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="99" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1aeddd69d34d4bd47dea9e6cc9ad549ebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator+</definition>
        <argsstring>(const Vector2 &amp;v1, double scalar)</argsstring>
        <name>operator+</name>
        <qualifiedname>tao::Vector2::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="100" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1a0feca9ade3edd654f44ab6073ba3f15f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator-</definition>
        <argsstring>(const Vector2 &amp;v1, const Vector2 &amp;v2)</argsstring>
        <name>operator-</name>
        <qualifiedname>tao::Vector2::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Scalar and vector subtraction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="105" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1a9c5ef0508eef61eab0fdb389e012c4d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator-</definition>
        <argsstring>(const Vector2 &amp;v1, double scalar)</argsstring>
        <name>operator-</name>
        <qualifiedname>tao::Vector2::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="106" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1a0cae90787028d9a95fa4cacc8ea90c56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator*</definition>
        <argsstring>(const Vector2 &amp;v1, const Vector2 &amp;v2)</argsstring>
        <name>operator*</name>
        <qualifiedname>tao::Vector2::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Scalar and vector multiplication. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="111" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1a2e923eb2dc41cd377715eb3f765ab71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator*</definition>
        <argsstring>(const Vector2 &amp;v1, double scalar)</argsstring>
        <name>operator*</name>
        <qualifiedname>tao::Vector2::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="112" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1a13733ffd2601e591203e86b8fccf258c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator/</definition>
        <argsstring>(const Vector2 &amp;v1, const Vector2 &amp;v2)</argsstring>
        <name>operator/</name>
        <qualifiedname>tao::Vector2::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Scalar and vector division. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="117" column="16"/>
      </memberdef>
      <memberdef kind="friend" id="classtao_1_1_vector2_1a53bb64928882a828e4759ae3ab743848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator/</definition>
        <argsstring>(const Vector2 &amp;v1, double scalar)</argsstring>
        <name>operator/</name>
        <qualifiedname>tao::Vector2::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classtao_1_1_vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taolib/vector2.h" line="118" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class object to represent a vector within a 2 dimensional space. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/taolib/vector2.h" line="7" column="1" bodyfile="include/taolib/vector2.h" bodystart="7" bodyend="130"/>
    <listofallmembers>
      <member refid="classtao_1_1_vector2_1a7bcb9f2c7420c0a419789e928e2b93c4" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>cross</name></member>
      <member refid="classtao_1_1_vector2_1a84749d146d1715a6e4238d300c4a75fc" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>distance</name></member>
      <member refid="classtao_1_1_vector2_1a45a264ebf3844c3755760474357257e3" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>dot</name></member>
      <member refid="classtao_1_1_vector2_1a3e65ba8e9fa432ffb07a22a22801cc13" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>get_angle</name></member>
      <member refid="classtao_1_1_vector2_1afd403d34438c90ce6b9fcb898166c13c" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>get_magnitude</name></member>
      <member refid="classtao_1_1_vector2_1aaa918b115227d1e8aa9b22eead200e3a" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>get_x</name></member>
      <member refid="classtao_1_1_vector2_1abd00ce60254a20edef09154364a6cef8" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>get_y</name></member>
      <member refid="classtao_1_1_vector2_1a911e6a2b0a9087fdd9be7c17ff8c04dd" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>normalized</name></member>
      <member refid="classtao_1_1_vector2_1a0cae90787028d9a95fa4cacc8ea90c56" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator*</name></member>
      <member refid="classtao_1_1_vector2_1a2e923eb2dc41cd377715eb3f765ab71d" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator*</name></member>
      <member refid="classtao_1_1_vector2_1a63e74f57546a0537d6fc8eed7ea1ddc9" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator+</name></member>
      <member refid="classtao_1_1_vector2_1aeddd69d34d4bd47dea9e6cc9ad549ebb" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator+</name></member>
      <member refid="classtao_1_1_vector2_1a0feca9ade3edd654f44ab6073ba3f15f" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator-</name></member>
      <member refid="classtao_1_1_vector2_1a9c5ef0508eef61eab0fdb389e012c4d5" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator-</name></member>
      <member refid="classtao_1_1_vector2_1a13733ffd2601e591203e86b8fccf258c" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator/</name></member>
      <member refid="classtao_1_1_vector2_1a53bb64928882a828e4759ae3ab743848" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>operator/</name></member>
      <member refid="classtao_1_1_vector2_1ae0f8951c3e148e326f728c80038e98b4" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>rotated</name></member>
      <member refid="classtao_1_1_vector2_1a76b488cae66f02da126eafefbc5090d9" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>Vector2</name></member>
      <member refid="classtao_1_1_vector2_1a4b683aa12a50d17113c0ca5456e5d42a" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>Vector2</name></member>
      <member refid="classtao_1_1_vector2_1a18f0d9cf89f39649c63c49d47ffcc9f7" prot="public" virt="non-virtual"><scope>tao::Vector2</scope><name>Vector2</name></member>
      <member refid="classtao_1_1_vector2_1a84b259315e2000abdc2e6af5cd65d3c9" prot="private" virt="non-virtual"><scope>tao::Vector2</scope><name>x</name></member>
      <member refid="classtao_1_1_vector2_1af1bb61a0f28fe19d09efbe4f7b01da6e" prot="private" virt="non-virtual"><scope>tao::Vector2</scope><name>y</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
