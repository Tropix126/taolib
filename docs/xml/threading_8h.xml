<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="threading_8h" kind="file" language="C++">
    <compoundname>threading.h</compoundname>
    <includes local="no">tuple</includes>
    <includes local="no">utility</includes>
    <includes refid="vex_8h" local="yes">vex.h</includes>
    <includedby refid="drivetrain_8h" local="yes">include/taolib/drivetrain.h</includedby>
    <incdepgraph>
      <node id="5">
        <label>math.h</label>
        <link refid="math_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/taolib/threading.h</label>
        <link refid="threading_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>vector2.h</label>
        <link refid="vector2_8h_source"/>
      </node>
      <node id="4">
        <label>vex.h</label>
        <link refid="vex_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stdio.h</label>
      </node>
      <node id="9">
        <label>stdlib.h</label>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="2">
        <label>tuple</label>
      </node>
      <node id="3">
        <label>utility</label>
      </node>
      <node id="11">
        <label>v5.h</label>
      </node>
      <node id="12">
        <label>v5_vcs.h</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/taolib/drivetrain.h</label>
        <link refid="drivetrain_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/taolib/taolib.h</label>
        <link refid="taolib_8h_source"/>
      </node>
      <node id="1">
        <label>include/taolib/threading.h</label>
        <link refid="threading_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structtao_1_1threading_1_1internal_1_1index__sequence__" prot="public">tao::threading::internal::index_sequence_</innerclass>
    <innerclass refid="structtao_1_1threading_1_1internal_1_1index__sequence__helper__" prot="public">tao::threading::internal::index_sequence_helper_</innerclass>
    <innerclass refid="structtao_1_1threading_1_1internal_1_1index__sequence__helper___3_010_u_00_01_next_8_8_8_01_4" prot="public">tao::threading::internal::index_sequence_helper_&lt; 0U, Next... &gt;</innerclass>
    <innernamespace refid="namespacetao">tao</innernamespace>
    <innernamespace refid="namespacetao_1_1threading">tao::threading</innernamespace>
    <innernamespace refid="namespacetao_1_1threading_1_1internal">tao::threading::internal</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vex.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tao::threading<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implementation<sp/>of<sp/>several<sp/>missing<sp/>standard<sp/>library<sp/>clstructs<sp/>and<sp/>functions<sp/>to<sp/>allow<sp/>for<sp/>`apply_`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::size_t...&gt;</highlight></codeline>
<codeline lineno="12" refid="structtao_1_1threading_1_1internal_1_1index__sequence__" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtao_1_1threading_1_1internal_1_1index__sequence__" kindref="compound">index_sequence_</ref><sp/>{};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::size_t<sp/>N,<sp/>std::size_t...<sp/>Next&gt;</highlight></codeline>
<codeline lineno="15" refid="structtao_1_1threading_1_1internal_1_1index__sequence__helper__" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtao_1_1threading_1_1internal_1_1index__sequence__helper__" kindref="compound">index_sequence_helper_</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structtao_1_1threading_1_1internal_1_1index__sequence__helper__" kindref="compound">index_sequence_helper_</ref>&lt;N<sp/>-<sp/>1U,<sp/>N<sp/>-<sp/>1U,<sp/>Next...&gt;<sp/>{};</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::size_t...<sp/>Next&gt;</highlight></codeline>
<codeline lineno="18" refid="structtao_1_1threading_1_1internal_1_1index__sequence__helper___3_010_u_00_01_next_8_8_8_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtao_1_1threading_1_1internal_1_1index__sequence__helper__" kindref="compound">index_sequence_helper_</ref>&lt;0U,<sp/>Next...&gt;<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtao_1_1threading_1_1internal_1_1index__sequence__" kindref="compound">type</ref><sp/>=<sp/><ref refid="structtao_1_1threading_1_1internal_1_1index__sequence__" kindref="compound">index_sequence_</ref>&lt;Next...&gt;;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">make_index_sequence_<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtao_1_1threading_1_1internal_1_1index__sequence__helper__" kindref="compound">index_sequence_helper_&lt;N&gt;::type</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fn,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>I&gt;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply_(Fn*<sp/>fn,<sp/>Tuple<sp/>t,<sp/><ref refid="structtao_1_1threading_1_1internal_1_1index__sequence__" kindref="compound">index_sequence_&lt;I...&gt;</ref>)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>(*fn)(std::get&lt;I&gt;(t)...);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fn,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>wrap_func_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>func_and_args_void)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>the<sp/>void<sp/>pointer<sp/>to<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>tuple<sp/>of<sp/>the<sp/>function<sp/>and<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>func_and_args<sp/>=<sp/>(std::tuple&lt;Fn,<sp/>std::tuple&lt;Args...&gt;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*&gt;*)func_and_args_void;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>the<sp/>thread<sp/>as<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>*(std::get&lt;2&gt;(*func_and_args))<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>the<sp/>function<sp/>with<sp/>the<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>apply_(std::get&lt;0&gt;(*func_and_args),<sp/>std::get&lt;1&gt;(*func_and_args),<sp/>make_index_sequence_&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)&gt;{});</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>func_and_args;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ret,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">vex::thread<sp/>make_thread(Ret<sp/>(*fn)(Args...),<sp/>Args...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>boolean<sp/>value<sp/>that<sp/>gets<sp/>set<sp/>to<sp/>true<sp/>by<sp/>the<sp/>thread<sp/>so<sp/>that<sp/>the<sp/>thread<sp/>gets<sp/>initialized<sp/>before<sp/>this<sp/>function<sp/>exits;<sp/>vex<sp/>STL<sp/>is<sp/>buggy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fake_promise<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>the<sp/>function<sp/>pointer<sp/>and<sp/>all<sp/>arguments<sp/>into<sp/>a<sp/>tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>func_and_args<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::tuple&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(fn),<sp/>std::tuple&lt;Args...&gt;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*&gt;(fn,<sp/>std::forward_as_tuple(args...),<sp/>&amp;fake_promise);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>thread<sp/>that<sp/>runs<sp/>the<sp/>function<sp/>wrapper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>vex::thread<sp/>internal_thread<sp/>=<sp/>vex::thread(internal::wrap_func_&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(fn),<sp/>Args...&gt;,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)func_and_args);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>thread<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!fake_promise)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>vex::task::sleep(1);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal_thread;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Cls,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ret,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">Ret<sp/>static_proxy(Cls*<sp/>cls_instance,<sp/>Ret<sp/>(Cls::*cls_fn)(Args...),<sp/>Args...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(cls_instance-&gt;*cls_fn)(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Cls,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ret,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">vex::thread<sp/>make_member_thread(Cls*<sp/>cls_instance,<sp/>Ret<sp/>(Cls::*cls_fn)(Args...),<sp/>Args...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_thread(static_proxy&lt;Cls,<sp/>Ret,<sp/>Args...&gt;,<sp/>cls_instance,<sp/>cls_fn,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="include/taolib/threading.h"/>
  </compounddef>
</doxygen>
